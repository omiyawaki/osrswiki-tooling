#!/bin/bash
set -euo pipefail

# OSRS Wiki Automated Backup Setup Script
# Sets up cron job for daily automated backups

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üïê OSRS Wiki Automated Backup Setup${NC}"
echo "====================================="
echo ""

# Ensure we're in the monorepo root
if [[ ! -f "CLAUDE.md" ]]; then
    echo -e "${RED}‚ùå Must run from monorepo root (where CLAUDE.md is located)${NC}"
    exit 1
fi

DAILY_BACKUP_SCRIPT="$(pwd)/scripts/shared/daily-backup.sh"
BACKUP_LOG_DIR="$HOME/Backups/osrswiki"
CRON_JOB_TIME="0 2"  # 2:00 AM daily

echo -e "${YELLOW}üìã Configuration:${NC}"
echo "Backup script: $DAILY_BACKUP_SCRIPT"
echo "Backup log directory: $BACKUP_LOG_DIR"
echo "Scheduled time: Daily at 2:00 AM"
echo ""

# Verify backup script exists and is executable
if [[ ! -f "$DAILY_BACKUP_SCRIPT" ]]; then
    echo -e "${RED}‚ùå Daily backup script not found: $DAILY_BACKUP_SCRIPT${NC}"
    exit 1
fi

if [[ ! -x "$DAILY_BACKUP_SCRIPT" ]]; then
    echo -e "${RED}‚ùå Daily backup script is not executable${NC}"
    echo "Run: chmod +x $DAILY_BACKUP_SCRIPT"
    exit 1
fi

echo -e "${GREEN}‚úÖ Daily backup script found and executable${NC}"

# Create backup log directory
mkdir -p "$BACKUP_LOG_DIR"
echo -e "${GREEN}‚úÖ Backup log directory created${NC}"

# Check if cron job already exists
EXISTING_CRON=$(crontab -l 2>/dev/null | grep "$DAILY_BACKUP_SCRIPT" || true)

if [[ -n "$EXISTING_CRON" ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Existing cron job found:${NC}"
    echo "$EXISTING_CRON"
    echo ""
    echo "Do you want to replace it? (y/N)"
    read -r response
    if [[ ! "$response" =~ ^[Yy]$ ]]; then
        echo -e "${YELLOW}Keeping existing cron job${NC}"
        exit 0
    fi
    
    # Remove existing cron job
    echo -e "${YELLOW}Removing existing cron job...${NC}"
    (crontab -l 2>/dev/null | grep -v "$DAILY_BACKUP_SCRIPT") | crontab -
fi

# Create new cron job
echo -e "${YELLOW}Setting up new cron job...${NC}"

# Get current crontab or create empty one
TEMP_CRON=$(mktemp)
crontab -l 2>/dev/null > "$TEMP_CRON" || true

# Add the new cron job with proper environment
cat >> "$TEMP_CRON" << EOF

# OSRS Wiki Daily Automated Backup
# Runs daily at 2:00 AM to backup all repositories
# Generated by setup-automated-backup.sh on $(date)
SHELL=/bin/bash
PATH=/usr/local/bin:/usr/bin:/bin
$CRON_JOB_TIME * * * $DAILY_BACKUP_SCRIPT
EOF

# Install the new crontab
crontab "$TEMP_CRON"
rm "$TEMP_CRON"

echo -e "${GREEN}‚úÖ Cron job installed successfully${NC}"

# Verify cron job was added
echo -e "${BLUE}üìã Current cron jobs:${NC}"
crontab -l | grep -A 5 -B 5 "$DAILY_BACKUP_SCRIPT"

# Create manual backup testing script
MANUAL_TEST_SCRIPT="$(pwd)/scripts/shared/test-backup-system.sh"
cat > "$MANUAL_TEST_SCRIPT" << EOF
#!/bin/bash
set -euo pipefail

# Manual test of the backup system
echo "üß™ Testing OSRS Wiki Backup System"
echo "================================="
echo ""

# Test the daily backup script manually
echo "Running daily backup script manually..."
$DAILY_BACKUP_SCRIPT

echo ""
echo "‚úÖ Manual backup test completed"
echo "Check logs at: $BACKUP_LOG_DIR/daily-backup.log"
EOF

chmod +x "$MANUAL_TEST_SCRIPT"
echo -e "${GREEN}‚úÖ Manual test script created: $MANUAL_TEST_SCRIPT${NC}"

# Create backup monitoring script
MONITOR_SCRIPT="$(pwd)/scripts/shared/monitor-backups.sh"
cat > "$MONITOR_SCRIPT" << EOF
#!/bin/bash
set -euo pipefail

# OSRS Wiki Backup Monitoring Script
# Shows status of automated backups

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "\${BLUE}üìä OSRS Wiki Backup System Status\${NC}"
echo "=================================="
echo ""

# Check if backup directory exists
BACKUP_DIR="$BACKUP_LOG_DIR"
if [[ -d "\$BACKUP_DIR" ]]; then
    echo -e "\${GREEN}‚úÖ Backup directory exists: \$BACKUP_DIR\${NC}"
    
    # Show disk usage
    BACKUP_SIZE=\$(du -sh "\$BACKUP_DIR" 2>/dev/null | cut -f1)
    echo "Total backup size: \$BACKUP_SIZE"
    
    # Count backup files
    BUNDLE_COUNT=\$(find "\$BACKUP_DIR" -name "*.bundle" 2>/dev/null | wc -l)
    echo "Bundle files: \$BUNDLE_COUNT"
    
    echo ""
else
    echo -e "\${RED}‚ùå Backup directory not found: \$BACKUP_DIR\${NC}"
fi

# Check recent backups
echo -e "\${BLUE}üìÖ Recent Backups (last 7 days):\${NC}"
find "\$BACKUP_DIR" -name "*-auto-*" -type d -mtime -7 2>/dev/null | sort -r | while read -r backup; do
    if [[ -n "\$backup" ]]; then
        BACKUP_DATE=\$(stat -f "%Sm" -t "%Y-%m-%d %H:%M" "\$backup" 2>/dev/null || echo "unknown")
        BACKUP_SIZE=\$(du -sh "\$backup" 2>/dev/null | cut -f1)
        echo "  \$(basename "\$backup") - \$BACKUP_DATE (\$BACKUP_SIZE)"
    fi
done

# Check log file
LOG_FILE="\$BACKUP_DIR/daily-backup.log"
if [[ -f "\$LOG_FILE" ]]; then
    echo ""
    echo -e "\${BLUE}üìã Recent Log Entries:\${NC}"
    tail -10 "\$LOG_FILE"
    
    # Check for recent success
    if tail -20 "\$LOG_FILE" | grep -q "SUCCESS.*Daily backup completed successfully"; then
        echo -e "\${GREEN}‚úÖ Recent backup was successful\${NC}"
    else
        echo -e "\${YELLOW}‚ö†Ô∏è  No recent successful backup found in logs\${NC}"
    fi
else
    echo -e "\${YELLOW}‚ö†Ô∏è  No backup log file found: \$LOG_FILE\${NC}"
fi

# Check cron job status
echo ""
echo -e "\${BLUE}‚è∞ Cron Job Status:\${NC}"
if crontab -l 2>/dev/null | grep -q "$DAILY_BACKUP_SCRIPT"; then
    echo -e "\${GREEN}‚úÖ Automated backup cron job is active\${NC}"
    crontab -l | grep "$DAILY_BACKUP_SCRIPT"
else
    echo -e "\${RED}‚ùå No automated backup cron job found\${NC}"
    echo "Run setup-automated-backup.sh to set it up"
fi

echo ""
echo -e "\${BLUE}üí° Commands:\${NC}"
echo "  Test backup manually: $MANUAL_TEST_SCRIPT"
echo "  View full log: less $BACKUP_LOG_DIR/daily-backup.log"
echo "  Emergency backup: ./scripts/shared/emergency-backup.sh"
EOF

chmod +x "$MONITOR_SCRIPT"
echo -e "${GREEN}‚úÖ Monitoring script created: $MONITOR_SCRIPT${NC}"

echo ""
echo -e "${GREEN}üéâ Automated Backup System Setup Complete!${NC}"
echo "=========================================="
echo ""
echo -e "${BLUE}What was configured:${NC}"
echo "‚úÖ Daily backup cron job at 2:00 AM"
echo "‚úÖ Backup logs in $BACKUP_LOG_DIR/daily-backup.log"
echo "‚úÖ Automatic cleanup of backups older than 30 days"
echo "‚úÖ Manual test script: $MANUAL_TEST_SCRIPT"
echo "‚úÖ Monitoring script: $MONITOR_SCRIPT"
echo ""
echo -e "${BLUE}Next steps:${NC}"
echo "1. Test manually: $MANUAL_TEST_SCRIPT"
echo "2. Monitor status: $MONITOR_SCRIPT"
echo "3. Check logs tomorrow after 2:00 AM"
echo ""
echo -e "${YELLOW}Notes:${NC}"
echo "- Backups run daily at 2:00 AM"
echo "- Old backups are automatically cleaned up after 30 days"
echo "- Logs are automatically rotated to prevent excessive growth"
echo "- Manual emergency backups can be created anytime with emergency-backup.sh"
echo ""
echo -e "${GREEN}‚ú® Your repository is now automatically backed up daily!${NC}"