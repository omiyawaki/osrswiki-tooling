// Generated by view binder compiler. Do not edit!
package com.omiyawaki.osrswiki.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.omiyawaki.osrswiki.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ViewTabHeaderWithSearchBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ImageButton clearAllButton;

  @NonNull
  public final TextView pageTitle;

  @NonNull
  public final ImageButton randomPageButton;

  @NonNull
  public final LinearLayout searchContainer;

  @NonNull
  public final ImageView searchIcon;

  @NonNull
  public final TextView searchText;

  @NonNull
  public final ImageView voiceSearchButton;

  private ViewTabHeaderWithSearchBinding(@NonNull LinearLayout rootView,
      @NonNull ImageButton clearAllButton, @NonNull TextView pageTitle,
      @NonNull ImageButton randomPageButton, @NonNull LinearLayout searchContainer,
      @NonNull ImageView searchIcon, @NonNull TextView searchText,
      @NonNull ImageView voiceSearchButton) {
    this.rootView = rootView;
    this.clearAllButton = clearAllButton;
    this.pageTitle = pageTitle;
    this.randomPageButton = randomPageButton;
    this.searchContainer = searchContainer;
    this.searchIcon = searchIcon;
    this.searchText = searchText;
    this.voiceSearchButton = voiceSearchButton;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ViewTabHeaderWithSearchBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ViewTabHeaderWithSearchBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.view_tab_header_with_search, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ViewTabHeaderWithSearchBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.clear_all_button;
      ImageButton clearAllButton = ViewBindings.findChildViewById(rootView, id);
      if (clearAllButton == null) {
        break missingId;
      }

      id = R.id.page_title;
      TextView pageTitle = ViewBindings.findChildViewById(rootView, id);
      if (pageTitle == null) {
        break missingId;
      }

      id = R.id.random_page_button;
      ImageButton randomPageButton = ViewBindings.findChildViewById(rootView, id);
      if (randomPageButton == null) {
        break missingId;
      }

      id = R.id.search_container;
      LinearLayout searchContainer = ViewBindings.findChildViewById(rootView, id);
      if (searchContainer == null) {
        break missingId;
      }

      id = R.id.search_icon;
      ImageView searchIcon = ViewBindings.findChildViewById(rootView, id);
      if (searchIcon == null) {
        break missingId;
      }

      id = R.id.search_text;
      TextView searchText = ViewBindings.findChildViewById(rootView, id);
      if (searchText == null) {
        break missingId;
      }

      id = R.id.voice_search_button;
      ImageView voiceSearchButton = ViewBindings.findChildViewById(rootView, id);
      if (voiceSearchButton == null) {
        break missingId;
      }

      return new ViewTabHeaderWithSearchBinding((LinearLayout) rootView, clearAllButton, pageTitle,
          randomPageButton, searchContainer, searchIcon, searchText, voiceSearchButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
