// Generated by view binder compiler. Do not edit!
package com.omiyawaki.osrswiki.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.omiyawaki.osrswiki.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentRecentSearchesBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView buttonClearAll;

  @NonNull
  public final ConstraintLayout headerLayout;

  @NonNull
  public final RecyclerView recyclerViewRecentSearches;

  @NonNull
  public final LinearLayout textViewEmptyState;

  @NonNull
  public final TextView textViewEmptyStateText;

  @NonNull
  public final TextView textViewHeaderTitle;

  private FragmentRecentSearchesBinding(@NonNull LinearLayout rootView,
      @NonNull TextView buttonClearAll, @NonNull ConstraintLayout headerLayout,
      @NonNull RecyclerView recyclerViewRecentSearches, @NonNull LinearLayout textViewEmptyState,
      @NonNull TextView textViewEmptyStateText, @NonNull TextView textViewHeaderTitle) {
    this.rootView = rootView;
    this.buttonClearAll = buttonClearAll;
    this.headerLayout = headerLayout;
    this.recyclerViewRecentSearches = recyclerViewRecentSearches;
    this.textViewEmptyState = textViewEmptyState;
    this.textViewEmptyStateText = textViewEmptyStateText;
    this.textViewHeaderTitle = textViewHeaderTitle;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentRecentSearchesBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentRecentSearchesBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_recent_searches, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentRecentSearchesBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonClearAll;
      TextView buttonClearAll = ViewBindings.findChildViewById(rootView, id);
      if (buttonClearAll == null) {
        break missingId;
      }

      id = R.id.headerLayout;
      ConstraintLayout headerLayout = ViewBindings.findChildViewById(rootView, id);
      if (headerLayout == null) {
        break missingId;
      }

      id = R.id.recyclerViewRecentSearches;
      RecyclerView recyclerViewRecentSearches = ViewBindings.findChildViewById(rootView, id);
      if (recyclerViewRecentSearches == null) {
        break missingId;
      }

      id = R.id.textViewEmptyState;
      LinearLayout textViewEmptyState = ViewBindings.findChildViewById(rootView, id);
      if (textViewEmptyState == null) {
        break missingId;
      }

      id = R.id.textViewEmptyStateText;
      TextView textViewEmptyStateText = ViewBindings.findChildViewById(rootView, id);
      if (textViewEmptyStateText == null) {
        break missingId;
      }

      id = R.id.textViewHeaderTitle;
      TextView textViewHeaderTitle = ViewBindings.findChildViewById(rootView, id);
      if (textViewHeaderTitle == null) {
        break missingId;
      }

      return new FragmentRecentSearchesBinding((LinearLayout) rootView, buttonClearAll,
          headerLayout, recyclerViewRecentSearches, textViewEmptyState, textViewEmptyStateText,
          textViewHeaderTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
